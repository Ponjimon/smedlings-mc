name: Deploying infrastructure

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: read

defaults:
  run:
    shell: bash
    working-directory: .

env:
  TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
  TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  TF_VAR_cloudflare_email: ${{ secrets.CLOUDFLARE_EMAIL }}
  TF_VAR_cloudflare_token: ${{ secrets.CLOUDFLARE_TOKEN }}
  TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
  TF_VAR_hostname: ${{ secrets.HOSTNAME }}
  TF_VAR_location: ${{ vars.LOCATION }}
  TF_VAR_server_type: ${{ vars.SERVER_TYPE }}
  TF_VAR_image: ${{ vars.IMAGE }}
  TF_VAR_repository_name: ${{ github.event.repository.name }}
  TF_VAR_github_token: ${{ secrets.GHUB_TOKEN }}

  AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_KEY }}

jobs:
  setup:
    name: Obtaining repository
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'development' }}
    steps:
      - name: Use repository
        uses: actions/checkout@v3

      - name: Upload repository
        uses: actions/upload-artifact@v3
        with:
          name: repository
          path: |
            ${{ github.workspace }}/terraform

  deploy:
    name: Deploying infrastructure
    needs: [setup]
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'development' }}
    steps:
      - name: Download repository
        uses: actions/download-artifact@v3
        with:
          name: repository

      - uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        run: terraform fmt -check

      - name: Terraform init
        run: terraform init -reconfigure -backend-config="region=auto" -backend-config="bucket=${{ secrets.R2_BUCKET}}" -backend-config="endpoint=${{ secrets.R2_ENDPOINT }}" -backend-config="key=terraform.tfstate" -backend-config="skip_credentials_validation=true" -backend-config="skip_region_validation=true" -backend-config="skip_metadata_api_check=true"

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: terraform plan

      - name: Terraform apply
        run: terraform apply -auto-approve

  provision:
    name: Provisioning infrastructure
    needs: [setup, deploy]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'development' }}
    steps:
      - name: Download repository
        uses: actions/download-artifact@v3
        with:
          name: repository

      - name: Install cloudflared
        run: |
          curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared '"$(lsb_release -cs)"' main' | sudo tee /etc/apt/sources.list.d/cloudflared.list
          sudo apt update && sudo apt install cloudflared

      - name: Debug Secrets
        run: |
          echo -n "${{ secrets.DEBUG_TEST }}"
          echo -n "${{ secrets.CF_ACCESS_SERVICE_TOKEN_ID }}" | tail -c 4
          echo -n "${{ secrets.CF_ACCESS_SERVICE_TOKEN_SECRET }}" | tail -c 4

      - name: Test SSH Connection Debug
        run: |
          ssh \
            -Tvv \
            -o ProxyCommand="cloudflared access ssh --hostname ssh.${{ secrets.HOSTNAME }} --id ${{ secrets.CF_ACCESS_SERVICE_TOKEN_ID }} --secret ${{ secrets.CF_ACCESS_SERVICE_TOKEN_SECRET }}" \
            business@ssh.${{ secrets.HOSTNAME }}

      # - name: Add SSH private key
      #   run: |
      #     ssh-agent -a $SSH_AUTH_SOCK > /dev/null   
      #     ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
      #   env:
      #     SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      # - name: Run ansible script
      #   shell: bash 
      #   run: |
      #     ANSIBLE_HOST_KEY_CHECKING=False \
      #     ansible-playbook -u root -i '${{ secrets.HOSTNAME }},' playbooks/main.yml
      #   env:
      #     SSH_AUTH_SOCK: /tmp/ssh_agent.sock